{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\birdtracker\\\\frontend\\\\src\\\\component\\\\FilterContainer.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Marker, InfoWindow, Polyline } from 'react-google-maps';\n\nconst maps_icon = require('../assets/marker_icon.png');\n\nconst FilterContainer = props => {\n  const [filterBird, setFilterBird] = useState(props.birds);\n  const [filterPaths, setFilterPaths] = useState([]);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const color = \"#ff2527\";\n\n  const fetchFilterData = () => {\n    let newList = [];\n\n    if (props.query != \"\") {\n      newList = props.birds.filter(bird => bird.name.includes(props.query));\n      setFilterBird(newList);\n    } else {\n      newList = props.birds;\n      setFilterBird(props.birds);\n    } // {color:red ,newLocations: [{},{},{}]}\n\n\n    newList.map(bird => {\n      let paths = [];\n      bird.locations.map(location => {\n        paths = [...paths, (({\n          lat,\n          lng\n        }) => ({\n          lat,\n          lng\n        }))(location.coordinates)];\n      });\n      setFilterPaths(filterPaths => [...filterPaths, {\n        color,\n        paths\n      }]);\n    });\n  };\n\n  useEffect(() => {\n    setFilterPaths([]); // Initialize again, prevent append from previous list\n\n    fetchFilterData();\n    console.log(filterPaths);\n  }, [props.birds, props.query]); //Update when birds or query has changed\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, filterBird.map(bird => bird.locations.map((location, index) => /*#__PURE__*/React.createElement(Marker, {\n    key: index,\n    position: location.coordinates,\n    icon: {\n      url: maps_icon,\n      scaleSize: new window.google.maps.Size(8, 8)\n    },\n    onClick: () => {\n      setSelectedLocation(location);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }))), selectedLocation && /*#__PURE__*/React.createElement(InfoWindow, {\n    position: selectedLocation.coordinates,\n    onCloseClick: () => {\n      setSelectedLocation(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, \"Bird's ID: \", selectedLocation.bird_id), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, selectedLocation.coordinates.lat, \", \", selectedLocation.coordinates.lat))));\n};\n\nexport default FilterContainer;","map":{"version":3,"sources":["C:/Projects/birdtracker/frontend/src/component/FilterContainer.js"],"names":["React","useState","useEffect","Marker","InfoWindow","Polyline","maps_icon","require","FilterContainer","props","filterBird","setFilterBird","birds","filterPaths","setFilterPaths","selectedLocation","setSelectedLocation","color","fetchFilterData","newList","query","filter","bird","name","includes","map","paths","locations","location","lat","lng","coordinates","console","log","index","url","scaleSize","window","google","maps","Size","bird_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n    Marker, \r\n    InfoWindow,\r\n    Polyline} from 'react-google-maps';\r\n\r\nconst maps_icon = require('../assets/marker_icon.png');\r\n\r\nconst FilterContainer = (props) =>{\r\n\r\n    const [filterBird, setFilterBird] = useState(props.birds);\r\n    const [filterPaths, setFilterPaths] = useState([]);\r\n    const [selectedLocation, setSelectedLocation] = useState(null);\r\n\r\n    const color = \"#ff2527\";\r\n\r\n    const fetchFilterData = () =>{\r\n        let newList = [];\r\n        if(props.query != \"\"){\r\n            newList = props.birds.filter(bird => bird.name.includes(props.query));\r\n            setFilterBird(newList);\r\n        } else {\r\n            newList = props.birds;\r\n            setFilterBird(props.birds);\r\n        }\r\n        // {color:red ,newLocations: [{},{},{}]}\r\n        newList.map(bird => {\r\n            let paths = [];\r\n            bird.locations.map(location => {\r\n                paths = [...paths, \r\n                    (({lat, lng})=>({lat, lng}))(location.coordinates)];\r\n            });\r\n            setFilterPaths(filterPaths=> [...filterPaths, {color, paths}]);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        setFilterPaths([]); // Initialize again, prevent append from previous list\r\n        fetchFilterData();\r\n        console.log(filterPaths);\r\n\r\n    },[props.birds, props.query]); //Update when birds or query has changed\r\n\r\n    return(\r\n        <div>\r\n            { filterBird.map(bird => (\r\n                bird.locations.map((location, index) => (\r\n                    <Marker key={index} \r\n                        position = {location.coordinates}\r\n                        icon = {{\r\n                            url: maps_icon,\r\n                            scaleSize: new window.google.maps.Size(8, 8)\r\n                        }}\r\n\r\n                        onClick = {() => {\r\n                            setSelectedLocation(location);\r\n                        }}\r\n                    />\r\n                ))\r\n            ))}\r\n\r\n            { selectedLocation && (\r\n                <InfoWindow\r\n                    position={\r\n                       selectedLocation.coordinates\r\n                    }\r\n                    onCloseClick = {()=>{\r\n                        setSelectedLocation(null);\r\n                    }}\r\n                >\r\n                <div>\r\n                <h3>Bird's ID: {selectedLocation.bird_id}</h3>\r\n                <h3>{selectedLocation.coordinates.lat}, {selectedLocation.coordinates.lat}</h3>\r\n                </div>\r\n                </InfoWindow>\r\n            )}\r\n\r\n            {/* {filterPaths.map((path, index) => (\r\n                <Polyline key = {index}\r\n                    path = {path}\r\n                    options = {{\r\n                        strokeColor: \"#ff2527\",\r\n                        strokeOpacity: 0.75,\r\n                        strokeWeight: 2\r\n                    }}\r\n                />\r\n            ))} */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FilterContainer;"]},"metadata":{},"sourceType":"module"}